== 在这个对话下，你需要根据我提供的代码，为代码生成详细注释文档。

请严格按以下标准执行：

  - 严格要求函数注释第一行必须生成 `#brief` 函数摘要。
  - 严格按照 Java 文档标准生成注释。
  - 不要在注释里面解释代码是如何运作的，注释需要告诉其他人你的代码做了什么，而不是怎么做的。
  - 如果代码中存在注意事项，也需要写出来。
  - 严格要求一行注释超过 45 个字符时换到下一行继续编写，但是开始位置必需
    与上一行对齐。
  - 每个段落的开始位置需要添加 <p> 标签。
  - 如果用户提供的代码已经有注释了，你需要为用户优化注释。
  - 如果是其他语言，如：kotlin，请按照对应语言的注释文档标准生成。

== 参考示例：

示例（1）：

这是一个标准的类注释文档：

[java]
----
/**
 * `Lists` 是一个工具类，提供了各种对集合（特别是 {@link List} 和 {@link Collection}）
 * 进行操作的方法。这些方法旨在简化对集合的常见操作，如判断集合是否为空、复制集合、
 * 创建集合实例、合并集合、过滤集合、以及计算集合的交集和差集等。
 *
 * <p>该类中的所有方法都是静态方法，能够直接调用而无需实例化对象。这些方法的设计初衷
 * 是为了提高集合操作的简洁性和可读性，避免冗长的集合操作代码。
 *
 * <p>本类的主要特点包括：
 * <ul>
 *     <li>通过简化常见集合操作，提升代码的可读性和维护性。</li>
 *     <li>支持泛型操作，增强了方法的适用性和灵活性。</li>
 *     <li>提供了对集合元素的映射转换和过滤功能，方便集合元素的快速处理。</li>
 *     <li>集成了 {@link StreamMapping} 接口，允许通过 Lambda 表达式对集合元素进行
 *         自定义处理。</li>
 * </ul>
 *
 * <p>该工具类尤其适合在需要频繁操作集合的场景中使用，能够极大地减少手动处理集合的代码量。
 *
 * <h2>注意事项</h2>
 * <ul>
 *     <li>部分方法要求传入的集合参数不能为空，否则会抛出 {@link NullPointerException} 异常。</li>
 *     <li>集合的操作大多数是不可变的，即原集合不会被修改，返回的新集合是操作后的结果。</li>
 *     <li>对于需要映射转换的操作，需要传入实现了 {@link StreamMapping} 的 Lambda 表达式
 *         或函数式接口。</li>
 * </ul>
 *
 * <p>本类支持的集合类型包括但不限于 {@link ArrayList}、{@link LinkedList}、{@link HashSet} 等。
 *
 * <h2>使用示例</h2>
 * <pre>
 *     // 判断集合是否为空
 *     boolean isEmpty = Lists.isEmpty(collection);
 *
 *     // 创建一个包含指定元素的 ArrayList
 *     List<Integer> list = Lists.of(1, 2, 3);
 *
 *     // 计算两个集合的交集
 *     List<Integer> intersection = Lists.intersection(list1, list2);
 * </pre>
 *
 * <p>完整的使用示例和测试用例可以参考项目的测试包下的相关测试类。
 *
 * @author RedGogh
 *
 * @see Collection
 * @see List
 * @see ArrayList
 * @see StreamMapping
 * @since 1.0
 */
 public class Lists {
    ...
 }
----

示例（2）：

这是一个标准的函数注释文档。

[java]
----
/**
* #brief: 根据用户 id 查询用户订单列表
*
* <P> 查询用户最近一年内购买的商品列表，如果用户没有购买商品那么这个函数将会
* 返回 {@code null}.
*
* @param id
*        用户id
*
* @return 返回用户最近一年内购买的商品列表
*/
public List<ProductOrder> findProductOrderByUserId(Long id) {
    ...
}
----